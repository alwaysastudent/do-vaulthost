---

- name: Create the infrastructure
  block:

    - name: Create the Vault host Droplet
      digital_ocean_droplet:
        state: present
        name: "{{ vaulthost.name }}"
        unique_name: "{{ vaulthost.unique_name }}"
        image: "{{ vaulthost.image }}"
        size: "{{ vaulthost.size }}"
        region: "{{ vaulthost.region }}"
        monitoring: "{{ vaulthost.monitoring }}"
        private_networking: "{{ vaulthost.private_networking }}"
        ssh_keys: "{{ vaulthost.ssh_keys }}"
        oauth_token: "{{ vaulthost.oauth_token }}"
      register: vaulthost_droplet

    - name: Show the Vault host's IP information
      debug:
        msg: |
          ssh root@{{ vaulthost_droplet.data.ip_address }}
          ssh root@{{ vaulthost_droplet.data.private_ipv4_address }}

- name: Configure the application # Following: https://learn.hashicorp.com/tutorials/vault/getting-started-install
  block:

    - name: Add the APT Key for HashiCorp
      apt_key:
        state: present
        url: https://apt.releases.hashicorp.com/gpg

    - name: Install the APT Repository for HashiCorp
      apt_repository:
        state: present
        repo: deb [arch=amd64] https://apt.releases.hashicorp.com bionic main

    - name: Install HashiCorp Vault
      apt:
        state: present
        name: vault
        update_cache: yes

    - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
      openssl_privatekey:
        path: /opt/vault/tls/vault.key
        owner: vault
        group: vault
        mode: '0400'

    - name: Generate an OpenSSL Certificate Signing Request for Vault
      openssl_csr:
        path: /opt/vault/tls/vault.csr
        privatekey_path: /opt/vault/tls/vault.key
        common_name: "{{ vaulthost_droplet.data.ip_address }}.xip.io"
        owner: vault
        group: vault
        mode: '0400'

    - name: Generate self-signed OpenSSL certificates for Vault
      openssl_certificate:
        path: /opt/vault/tls/vault.crt
        privatekey_path: /opt/vault/tls/vault.key
        csr_path: /opt/vault/tls/vault.csr
        provider: selfsigned
        owner: vault
        group: vault
        mode: '0444'

    - name: Lay down the Vault configuration file
      copy:
        dest: /etc/vault.d/vault.hcl
        backup: yes
        owner: vault
        group: vault
        mode: '0644'
        content: |
          ui = true
          storage "file" {
            path = "/opt/vault/data"
          }
          listener "tcp" {
            address       = "0.0.0.0:8200"
            tls_cert_file = "/opt/vault/tls/vault.crt"
            tls_key_file  = "/opt/vault/tls/vault.key"
          }

    - name: Start and enable HashiCorp Vault
      systemd:
        name: vault
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Initialize the Vault (one-time only operation)
      shell: vault operator init
      args:
        creates: /opt/vault/data/core
      environment:
        VAULT_CACERT: /opt/vault/tls/vault.crt
        VAULT_ADDR: https://{{ vaulthost_droplet.data.ip_address }}.xip.io:8200
      register: vault_operator_init

    - name: Write the Vault secrets locally (caveat emptor)
      copy:
        dest: /root/vault.unseal
        owner: root
        group: root
        mode: 0400
        content: "{{ vault_operator_init.stdout }}\n"
      when:
        - vault_operator_init.changed
        - write_vault_secrets | default(False) | bool

    - name: Create a fact for the Vault unseal key 1
      set_fact:
        vault_unseal_key_1: "{{ vault_operator_init.stdout_lines[0].split(': ')[1] }}"
      when: vault_operator_init.changed

    - name: Create a fact for the Vault unseal key 2
      set_fact:
        vault_unseal_key_2: "{{ vault_operator_init.stdout_lines[1].split(': ')[1] }}"
      when: vault_operator_init.changed

    - name: Create a fact for the Vault unseal key 3
      set_fact:
        vault_unseal_key_3: "{{ vault_operator_init.stdout_lines[2].split(': ')[1] }}"
      when: vault_operator_init.changed

    - name: Create a fact for the Vault initial root token
      set_fact:
        vault_root_token: "{{ vault_operator_init.stdout_lines[6].split(': ')[1] }}"
      when: vault_operator_init.changed

    - name: Unseal the Vault (apply unseal key 1)
      shell: |
        vault operator unseal {{ vault_unseal_key_1 }}
      environment:
        VAULT_CACERT: /opt/vault/tls/vault.crt
        VAULT_ADDR: https://{{ vaulthost_droplet.data.ip_address }}.xip.io:8200
      when: vault_operator_init.changed

    - name: Unseal the Vault (apply unseal key 2)
      shell: |
        vault operator unseal {{ vault_unseal_key_2 }}
      environment:
        VAULT_CACERT: /opt/vault/tls/vault.crt
        VAULT_ADDR: https://{{ vaulthost_droplet.data.ip_address }}.xip.io:8200
      when: vault_operator_init.changed

    - name: Unseal the Vault (apply unseal key 3)
      shell: |
        vault operator unseal {{ vault_unseal_key_3 }}
      environment:
        VAULT_CACERT: /opt/vault/tls/vault.crt
        VAULT_ADDR: https://{{ vaulthost_droplet.data.ip_address }}.xip.io:8200
      when: vault_operator_init.changed

    - name: Show the Vault status (should be unsealed now)
      shell: |
        vault status
      environment:
        VAULT_CACERT: /opt/vault/tls/vault.crt
        VAULT_ADDR: https://{{ vaulthost_droplet.data.ip_address }}.xip.io:8200
        VAULT_TOKEN: "{{ vault_root_token }}"
      when: vault_operator_init.changed

    - name: Lay down Vault /root/vault.env (convenience)
      copy:
        dest: /root/vault.env
        owner: root
        group: root
        mode: 0400
        content: |
          export VAULT_ADDR='https://{{ vaulthost_droplet.data.ip_address }}.xip.io:8200'
          export VAULT_CACERT='/opt/vault/tls/vault.crt'
          export VAULT_TOKEN='{{ vault_root_token }}'

    - name: Create versioned secrets (kv-v2) at secret/
      shell: |
        vault secrets enable -path=secret kv-v2
      environment:
        VAULT_ADDR: https://{{ vaulthost_droplet.data.ip_address }}.xip.io:8200
        VAULT_CACERT: /opt/vault/tls/vault.crt
        VAULT_TOKEN: "{{ vault_root_token }}"

  delegate_to: root@{{ vaulthost_droplet.data.ip_address }}
  connection: ssh
